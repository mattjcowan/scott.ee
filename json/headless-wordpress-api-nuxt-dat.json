[{"id":1583,"date":"2018-06-07T09:32:48","date_gmt":"2018-06-07T09:32:48","guid":{"rendered":"https://api.scott.ee/?p=1583"},"modified":"2018-06-07T09:40:13","modified_gmt":"2018-06-07T09:40:13","slug":"headless-wordpress-api-nuxt-dat","status":"publish","type":"post","link":"https://api.scott.ee/journal/headless-wordpress-api-nuxt-dat/","title":{"rendered":"Decoupled WordPress with Nuxt.js and Dat"},"content":{"rendered":"\n<p>If you have ever visited this site before you may have noticed a few changes over the last week. I have been tinkering with the WordPress API to better understand what is involved with creating a decoupled theme. As with all good projects I started by setting myself a few goals:</p>\n<ul><li><strong>Learn</strong>. I work with React most days so I wanted to try something else to better understand modern web development, not just a particular framework</li>\n<li><strong>Speed</strong>. I wanted a site that is extremely fast, lightweight and better for the planet</li>\n<li><strong>Resilient</strong>. A site can handle LOTS of traffic and is also available via the P2P web</li>\n<li><strong>Low cost</strong>. Less than &pound;15 a month to host and maintain</li>\n<li><strong>Privacy built in</strong>. No trackers, externally hosted JavaScript or fonts</li>\n</ul><p><noscript><img class=\"alignnone size-full wp-image-1596\" src=\"https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?w=900&amp;ssl=1\" alt=\"\" srcset=\"https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?w=1500&amp;ssl=1 1500w, https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=250%2C140&amp;ssl=1 250w, https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=768%2C429&amp;ssl=1 768w, https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=700%2C391&amp;ssl=1 700w, https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=120%2C67&amp;ssl=1 120w\" sizes=\"(max-width: 900px) 100vw, 900px\" data-recalc-dims=\"1\"></noscript><div class=\"lazy\"><img class=\"alignnone size-full wp-image-1596\" src=\"\" alt=\"\" srcset=\"\" sizes=\"(max-width: 900px) 100vw, 900px\" data-recalc-dims=\"1\" data-src=\"https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?w=900&amp;ssl=1\" data-srcset=\"https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?w=1500&amp;ssl=1 1500w, https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=250%2C140&amp;ssl=1 250w, https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=768%2C429&amp;ssl=1 768w, https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=700%2C391&amp;ssl=1 700w, https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=120%2C67&amp;ssl=1 120w\"></div></p>\n<h3>Nuxt.js</h3>\n<p>At the heart of the new site is the&nbsp;<a href=\"https://nuxtjs.org/\" rel=\"noreferrer noreferrer noreferrer\">Nuxt.js</a>&nbsp;framework. Nuxt is a framework for creating Universal <a href=\"https://vuejs.org/\">Vue.js</a> Applications and in many ways it feels like working on a WordPress theme. It has a folder for your pages/templates, a hook API, support for plugins and components (or template parts if your thinking WordPress). Nuxt follows a philosophy of convention over configuration, drop Vue components in their respective folders and Nuxt will bind everything together.</p>\n<p>This fairly rigid structure is important to the framework as it allows it to operate in three distinct modes:</p>\n<ul><li>Single page application (SPA) &ndash; Run as a regular Vue web app</li>\n<li>Server Side Rendered (SSR) &ndash; For each request, pre-render the application in a server and send that back to the client</li>\n<li>Static (Generated) &ndash; Pre-render the application once during build, and then serve it as an SPA</li>\n</ul><p>I was personally interested in the static (generated) and SPA modes which would allow me to host the interface in isolation to WordPress and without the need for Node.js hosting. This would allow me to make use of some of the free static hosting options out there like&nbsp;<a href=\"https://pages.github.com/\" rel=\"noreferrer noreferrer noreferrer\">GitHub pages</a>&nbsp;or&nbsp;<a href=\"https://href.li/?http://surge.sh/\" rel=\"noreferrer noreferrer noreferrer\">surge.sh</a>.</p>\n<p>Out of the box Nuxt supports routing (<a href=\"https://router.vuejs.org/\">vue router</a>), a store (<a href=\"https://vuex.vuejs.org/\">vuex</a>), filters (core vue 2) and meta data (<a href=\"https://github.com/declandewet/vue-meta\">vue-meta</a>). I added some additional plugins for progressive web app (<a href=\"https://github.com/nuxt-community/pwa-module\">PWA</a>) features, <a href=\"http://velocityjs.org/\">animation</a>, <a href=\"https://github.com/hilongjw/vue-lazyload\">lazy loading</a>, <a href=\"https://github.com/Vivify-Ideas/vue-shortcuts\">keyboard navigation</a>, <a href=\"https://github.com/nuxt-community/sitemap-module\">sitemap</a> generation and API consumption with <a href=\"https://axios.nuxtjs.org/\">axios</a>.</p>\n<p>After some experimentation I discovered that Nuxt didn&rsquo;t quite work as I expected to. A statically generated version of the site only loads statically for the initial page load, the app is then bootstrapped and runs client side, making API requests back to the WordPress API. This is probably fine in most circumstances but I wanted to have a version of the site served over <a href=\"https://datproject.org/\">Dat</a> (the <a href=\"https://beakerbrowser.com/\">peer to peer web</a>) and would rather that it didn&rsquo;t need the API. I was looking for a truly static site.</p>\n<p>Luckily Nuxt has some hooks which allowed me to cache a local copy of the API responses as JSON during the build process. When deployed, the app will then query itself rather than the WordPress API. You can see some of the logic&nbsp;<a href=\"https://href.li/?https://github.com/scottsweb/scott.ee/blob/master/modules/generate.js\" rel=\"noreferrer noreferrer noreferrer\">here</a>&nbsp;and&nbsp;<a href=\"https://href.li/?https://github.com/scottsweb/scott.ee/blob/master/plugins/axios.js\" rel=\"noreferrer noreferrer noreferrer\">here</a>.</p>\n<h3>WordPress</h3>\n<p>The WordPress side didn&rsquo;t need a great deal of tinkering. I moved the site to <a href=\"https://api.scott.ee\">api.scott.ee</a> and set a redirect on that to the main site. I then introduced a couple of filters for supporting lazy loaded images and enabled <a href=\"https://jetpack.com/support/image-cdn/\">photon in Jetpack</a> so images are served from a CDN. Images are the only thing that are not part of the generated build of the site.</p>\n<p>WordPress should see very little traffic (if any) and only ever be hit when I want to write some new content or during the site build/generate process when the API is fetched and cached.</p>\n<h3>Performance</h3>\n<p>Nuxt takes care of a great deal of the app bundling, minification and optimisation for you. Add the PWA module and you can get a decent <a href=\"https://developers.google.com/web/tools/lighthouse/\">Lighthouse</a> score right out the box. I also recommend installing the <a href=\"https://github.com/nuxt-community/webpackmonitor-module\">Nuxt webpack monitor module</a> which allows you to inspect the size of your bundles which can be useful when you start to make use of third party add ons. Running <code>yarn nuxt build --webpackmonitor --analyze</code> will launch an interactive breakdown of how your site is put together.</p>\n<p>The next thing to implement was lazy loading. Lazy loading ensures that images are not wasting bandwidth by loading unnecessarily. Using Jetpack&rsquo;s photon CDN I can request a much smaller version of the original image to act as a loading image while the original, full size image, is fetched. I use CSS filters to blur the loading image slightly and make it greyscale. The result is rather neat:</p>\n<p><noscript><img class=\"alignnone size-full wp-image-1597\" src=\"https://i1.wp.com/api.scott.ee/wp-content/uploads/journal-hampshire-river.jpg?w=900&amp;ssl=1\" alt=\"Image of river in Hampshire, England. Used to demo lazy loading.\" srcset=\"https://i1.wp.com/api.scott.ee/wp-content/uploads/journal-hampshire-river.jpg?w=1500&amp;ssl=1 1500w, https://i1.wp.com/api.scott.ee/wp-content/uploads/journal-hampshire-river.jpg?resize=250%2C140&amp;ssl=1 250w, https://i1.wp.com/api.scott.ee/wp-content/uploads/journal-hampshire-river.jpg?resize=768%2C429&amp;ssl=1 768w, https://i1.wp.com/api.scott.ee/wp-content/uploads/journal-hampshire-river.jpg?resize=700%2C391&amp;ssl=1 700w, https://i1.wp.com/api.scott.ee/wp-content/uploads/journal-hampshire-river.jpg?resize=120%2C67&amp;ssl=1 120w\" sizes=\"(max-width: 900px) 100vw, 900px\" data-recalc-dims=\"1\"></noscript><div class=\"lazy\"><img class=\"alignnone size-full wp-image-1597\" src=\"\" alt=\"Image of river in Hampshire, England. Used to demo lazy loading.\" srcset=\"\" sizes=\"(max-width: 900px) 100vw, 900px\" data-recalc-dims=\"1\" data-src=\"https://i1.wp.com/api.scott.ee/wp-content/uploads/journal-hampshire-river.jpg?w=900&amp;ssl=1\" data-srcset=\"https://i1.wp.com/api.scott.ee/wp-content/uploads/journal-hampshire-river.jpg?w=1500&amp;ssl=1 1500w, https://i1.wp.com/api.scott.ee/wp-content/uploads/journal-hampshire-river.jpg?resize=250%2C140&amp;ssl=1 250w, https://i1.wp.com/api.scott.ee/wp-content/uploads/journal-hampshire-river.jpg?resize=768%2C429&amp;ssl=1 768w, https://i1.wp.com/api.scott.ee/wp-content/uploads/journal-hampshire-river.jpg?resize=700%2C391&amp;ssl=1 700w, https://i1.wp.com/api.scott.ee/wp-content/uploads/journal-hampshire-river.jpg?resize=120%2C67&amp;ssl=1 120w\"></div></p>\n<p>My final trick for images is to detect low bandwidth (2G/3G) visitors and those with the <a href=\"https://support.google.com/chrome/?p=data_saver_off\">data saver option enabled</a> in their browser. In <a href=\"https://github.com/scottsweb/scott.ee/blob/master/plugins/lazyload.js#L18-L40\">these scenarios</a> the image quality is reduced to 50% and the resolution divided by four.</p>\n<p>As you page around the site a request for the next page is made in the background of the current page to help speed things up too.</p>\n<h3>Infrastructure</h3>\n<p>I had grand plans for this. My aim was to use <a href=\"https://www.cloudflare.com/load-balancing/\">Cloudflare&rsquo;s load balancing</a> feature to split the site hosting between&nbsp;<a href=\"https://href.li/?https://www.netlify.com/\" rel=\"noreferrer noreferrer noreferrer\">Netlify</a>&nbsp;and GitHub pages. That way if either service went down, the site would stay up. Cloudflare would also act as a third backup / cache if things got really messy. I struggled to get the load balancing health checks to work and the load balancing feature came in at a whopping cost of $5 a month so I decided to park that idea for now.</p>\n<p>After some speed testing I decided to keep things simple. It turns out that GitHub pages are one of the fastest places to put your code and Cloudfare only seemed to make it slower (albeit just a little bit):</p>\n<pre class=\"wp-block-code\"><code>netlify: sweden (no cloudflare)\r\n\r\nFirst test: 2.04s 88/100\r\nSecond test: 1.79s 88/100\r\nThird test: 1.69s 88/100\r\n\r\nnetlify: sweden (cloudflare)\r\n\r\nFirst test: 3.17s 94/100\r\nSecond test: 2.20s 94/100\r\nThird test: 3.17s 94/100\r\n\r\ngithub: sweden (no cloudflare)\r\n\r\nFirst test: 540ms 88/100\r\nSecond test: 200ms 88/100\r\nThird test: 236ms 88/100\r\n\r\ngithub: sweden (cloudflare)\r\n\r\nFirst test: 786ms 94/100\r\nSecond test: 312ms 94/100\r\nThird test: 277ms 94/100</code></pre>\n<h3>Dat</h3>\n<p><a href=\"https://href.li/?https://datproject.org/\" rel=\"noreferrer noreferrer noreferrer\">Dat</a>&nbsp;describes itself as:</p>\n<blockquote class=\"wp-block-quote\"><p>A p2p hypermedia protocol. It provides public-key-addressed file archives which can be synced securely and browsed on-demand.</p></blockquote>\n<p>In short, you can host your website using peer to peer technology and it is super exciting. Everyone that visits a site is also potentially a host of the site.</p>\n<p>In order to visit the Dat version of my site you can use the <a href=\"https://href.li/?https://beakerbrowser.com/\" rel=\"noreferrer noreferrer noreferrer\">Beaker</a> browser. Using Dat DNS allows the site to be found at: <a href=\"dat://scott.ee/\">dat://scott.ee/</a>. There is currently one mirror/peer that is always online at&nbsp;<a href=\"https://href.li/?https://hashbase.io/\" rel=\"noreferrer noreferrer noreferrer\">hashbase.io</a>&nbsp;and one of my next projects will be to set a Raspberry Pi to the task of providing another mirror. I would love to see some other mirrors pop up too if you feel like adding it to your library.</p>\n<p>Using Nuxt to statically generate the site makes pushing to Dat a much simpler task, I am not really sure how WordPress will adapt to the peer to peer web as things currently stand.</p>\n<h3>The Results</h3>\n<p>So how did I do with my goals?</p>\n<blockquote class=\"wp-block-quote\"><p><strong>Learn</strong>. I work with React most days so I wanted to try something else to better understand modern web development, not just a particular framework</p></blockquote>\n<p>Completed. I am fairly comfortable with the basics of Vue now and learnt a great deal about Nuxt as well.</p>\n<blockquote class=\"wp-block-quote\"><p><strong>Speed</strong>. I wanted a site that is extremely fast, lightweight and better for the planet</p></blockquote>\n<p>Pretty good, the load time hovers around 300ms and the page size at around 130kb without images. The lighthouse scores are fairly decent too with the lowest score being 73 for progressive web app features (this is mostly because I have disabled the service worker while I get up to speed with how they work).</p>\n<p>It turns out that a friend and colleague at work has also been experimenting with making WordPress more planet friendly at the same time. I highly recommend taking a read of his post on serving <a href=\"https://blog.jacklenox.com/2018/06/04/delivering-wordpress-in-7kb/\">WordPress in just 7kb</a>! quite the achievement and it shows there is probably a great deal room for improvement here.</p>\n<figure class=\"wp-block-image\"></figure><blockquote class=\"wp-block-quote\"><p><strong>Resilient</strong>. A site can handle LOTS of traffic and to be redundant via the peer to peer web</p></blockquote>\n<p>Moderate. Without the load balancing there is a single point of failure. Having the Dat version ticks the box for the P2P web although I would like to consider seeding the site on other protocols as well.</p>\n<blockquote class=\"wp-block-quote\"><p><strong>Low cost</strong>. Less than &pound;15 a month to host and maintain</p></blockquote>\n<p>Complete. Cost is &pound;0.</p>\n<blockquote class=\"wp-block-quote\"><p><strong>Privacy built in</strong>. No trackers, externally hosted JavaScript or fonts</p></blockquote>\n<p>Complete. No need for GDPR compliance&nbsp;&#128578;</p>\n<h3>What Next?</h3>\n<p>The site isn&rsquo;t much to look at right now, I treated this a purely a technical exercise rather than a design one but it provides the foundations for something much more interesting. My plans include:</p>\n<ul><li>Gutenberg support</li>\n<li>Sustainable hosting. Performance is one part of the battle</li>\n<li>Store preservation between sessions which may be a better approach than the locally cached API during build</li>\n<li>Service worker support. I would like to get the Lighthouse score to 100 and find some other performance gains</li>\n<li>An automated build and deploy script that only builds the difference in content</li>\n</ul><p>If you are interested in the code you can find it here:&nbsp;<a href=\"https://href.li/?https://github.com/scottsweb/scott.ee\" rel=\"nofollow noreferrer noreferrer noreferrer\">github.com/scottsweb/scott.ee</a>.</p>\n","protected":false},"excerpt":{"rendered":"If you have ever visited this site before you may have noticed a few changes over the last week. I have been tinkering with the WordPress API to better understand what is involved with creating a decoupled theme. As with all good projects I started by setting myself a few goals: Learn. I work with</p><p><a class=\"view-article\" href=\"https://api.scott.ee/journal/headless-wordpress-api-nuxt-dat/\">Read more</a></p>","protected":false},"author":1,"featured_media":1596,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[15,11],"tags":[],"_links":{"self":[{"href":"https://api.scott.ee/wp-json/wp/v2/posts/1583"}],"collection":[{"href":"https://api.scott.ee/wp-json/wp/v2/posts"}],"about":[{"href":"https://api.scott.ee/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://api.scott.ee/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://api.scott.ee/wp-json/wp/v2/comments?post=1583"}],"version-history":[{"href":"https://api.scott.ee/wp-json/wp/v2/posts/1583/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://api.scott.ee/wp-json/wp/v2/media/1596"}],"wp:attachment":[{"href":"https://api.scott.ee/wp-json/wp/v2/media?parent=1583"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://api.scott.ee/wp-json/wp/v2/categories?post=1583"},{"taxonomy":"post_tag","embeddable":true,"href":"https://api.scott.ee/wp-json/wp/v2/tags?post=1583"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]},"_embedded":{"author":[{"id":1,"name":"scottsweb","url":"","description":"","link":"https://api.scott.ee/journal/author/scottsweb/","slug":"scottsweb","_links":{"self":[{"href":"https://api.scott.ee/wp-json/wp/v2/users/1"}],"collection":[{"href":"https://api.scott.ee/wp-json/wp/v2/users"}]}}],"wp:featuredmedia":[{"id":1596,"date":"2018-06-07T09:22:22","slug":"journal-wp-nuxt-dat","type":"attachment","link":"https://api.scott.ee/journal/headless-wordpress-api-nuxt-dat/journal-wp-nuxt-dat/","title":{"rendered":"journal-wp-nuxt-dat"},"author":1,"caption":{"rendered":""},"alt_text":"","media_type":"image","mime_type":"image/jpeg","media_details":{"width":1500,"height":838,"file":"journal-wp-nuxt-dat.jpg","sizes":{"thumbnail":{"file":"journal-wp-nuxt-dat-150x150.jpg","width":150,"height":150,"mime_type":"image/jpeg","source_url":"https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=150%2C150&ssl=1"},"medium":{"file":"journal-wp-nuxt-dat-250x140.jpg","width":250,"height":140,"mime_type":"image/jpeg","source_url":"https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=250%2C140&ssl=1"},"medium_large":{"file":"journal-wp-nuxt-dat-768x429.jpg","width":768,"height":429,"mime_type":"image/jpeg","source_url":"https://api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat-768x429.jpg"},"large":{"file":"journal-wp-nuxt-dat-700x391.jpg","width":700,"height":391,"mime_type":"image/jpeg","source_url":"https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=700%2C391&ssl=1"},"small":{"file":"journal-wp-nuxt-dat-120x67.jpg","width":120,"height":67,"mime_type":"image/jpeg","source_url":"https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=120%2C67&ssl=1"},"avatar":{"file":"journal-wp-nuxt-dat-64x64.jpg","width":64,"height":64,"mime_type":"image/jpeg","source_url":"https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?resize=64%2C64&ssl=1"},"full":{"file":"journal-wp-nuxt-dat.jpg?fit=1500%2C838&ssl=1","width":1500,"height":838,"mime_type":"image/jpeg","source_url":"https://i2.wp.com/api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg?fit=1500%2C838&ssl=1"}},"image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":"","orientation":"0","keywords":[]}},"source_url":"https://api.scott.ee/wp-content/uploads/journal-wp-nuxt-dat.jpg","_links":{"self":[{"href":"https://api.scott.ee/wp-json/wp/v2/media/1596"}],"collection":[{"href":"https://api.scott.ee/wp-json/wp/v2/media"}],"about":[{"href":"https://api.scott.ee/wp-json/wp/v2/types/attachment"}],"author":[{"embeddable":true,"href":"https://api.scott.ee/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://api.scott.ee/wp-json/wp/v2/comments?post=1596"}]}}],"wp:term":[[{"id":15,"link":"https://api.scott.ee/journal/category/sustainability/","name":"Sustainability","slug":"sustainability","taxonomy":"category","_links":{"self":[{"href":"https://api.scott.ee/wp-json/wp/v2/categories/15"}],"collection":[{"href":"https://api.scott.ee/wp-json/wp/v2/categories"}],"about":[{"href":"https://api.scott.ee/wp-json/wp/v2/taxonomies/category"}],"wp:post_type":[{"href":"https://api.scott.ee/wp-json/wp/v2/posts?categories=15"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":11,"link":"https://api.scott.ee/journal/category/wordpress/","name":"WordPress","slug":"wordpress","taxonomy":"category","_links":{"self":[{"href":"https://api.scott.ee/wp-json/wp/v2/categories/11"}],"collection":[{"href":"https://api.scott.ee/wp-json/wp/v2/categories"}],"about":[{"href":"https://api.scott.ee/wp-json/wp/v2/taxonomies/category"}],"wp:post_type":[{"href":"https://api.scott.ee/wp-json/wp/v2/posts?categories=11"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}],[]]},"page":1}]